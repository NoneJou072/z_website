<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on 海豚的博客</title>
    <link>https://nonejou072.github.io/posts/leetcode/</link>
    <description>Recent content in leetcode on 海豚的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2023 圆润的海豚</copyright>
    <lastBuildDate>Tue, 13 Jun 2023 20:55:37 +0100</lastBuildDate><atom:link href="https://nonejou072.github.io/posts/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Datawhale数据结构基础课程笔记-(Day3-6)分治</title>
      <link>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E5%88%86%E6%B2%BB/</link>
      <pubDate>Mon, 18 Dec 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E5%88%86%E6%B2%BB/</guid>
      <description>递归（Recursion）：指的是一种通过重复将原问题分解为同类的子问题而解决的方法。在绝大数编程语言中，可以通过在函数中再次调用函数自身的方式来实现递归。</description>
      
    </item>
    
    <item>
      <title>Datawhale数据结构基础课程笔记-(Day7-9)回溯</title>
      <link>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E5%9B%9E%E6%BA%AF/</link>
      <pubDate>Mon, 18 Dec 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E5%9B%9E%E6%BA%AF/</guid>
      <description>回溯算法（Backtracking）：一种能避免不必要搜索的穷举式的搜索算法。采用试错的思想，在搜索尝试过程中寻找问题的解，当探索到某一步时，发现原先的选择并不满足求解条件，或者还需要满足更多求解条件时，就退回一步（回溯）重新选择，这种走不通就退回再走的技术称为「回溯法」，而满足回溯条件的某个状态的点称为「回溯点」。</description>
      
    </item>
    
    <item>
      <title>Datawhale数据结构基础课程笔记-(Day3-6)递归</title>
      <link>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E9%80%92%E5%BD%92/</link>
      <pubDate>Thu, 14 Dec 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E9%80%92%E5%BD%92/</guid>
      <description>递归（Recursion）：指的是一种通过重复将原问题分解为同类的子问题而解决的方法。在绝大数编程语言中，可以通过在函数中再次调用函数自身的方式来实现递归。</description>
      
    </item>
    
    <item>
      <title>Datawhale数据结构基础课程笔记-(Day1-2)枚举</title>
      <link>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Tue, 12 Dec 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E6%9E%9A%E4%B8%BE/</guid>
      <description>枚举算法（Enumeration Algorithm）：也称为穷举算法，指的是按照问题本身的性质，一一列举出该问题所有可能的解，并在逐一列举的过程中，将它们逐一与目标状态进行比较以得出满足问题要求的解。在列举的过程中，既不能遗漏也不能重复。</description>
      
    </item>
    
  </channel>
</rss>
