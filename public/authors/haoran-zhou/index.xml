<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haoran Zhou on 海豚的博客</title>
    <link>https://nonejou072.github.io/authors/haoran-zhou/</link>
    <description>Recent content in Haoran Zhou on 海豚的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2024 圆润的海豚</copyright>
    <lastBuildDate>Mon, 18 Dec 2023 13:11:22 +0800</lastBuildDate><atom:link href="https://nonejou072.github.io/authors/haoran-zhou/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Datawhale数据结构基础课程笔记-(Day3-6)分治</title>
      <link>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E5%88%86%E6%B2%BB/</link>
      <pubDate>Mon, 18 Dec 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E5%88%86%E6%B2%BB/</guid>
      <description>分治算法（Divide and Conquer）：字面上的解释是「分而治之」，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。</description>
      
    </item>
    
    <item>
      <title>Datawhale数据结构基础课程笔记-(Day7-9)回溯</title>
      <link>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E5%9B%9E%E6%BA%AF/</link>
      <pubDate>Mon, 18 Dec 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E5%9B%9E%E6%BA%AF/</guid>
      <description>回溯算法（Backtracking）：一种能避免不必要搜索的穷举式的搜索算法。采用试错的思想，在搜索尝试过程中寻找问题的解，当探索到某一步时，发现原先的选择并不满足求解条件，或者还需要满足更多求解条件时，就退回一步（回溯）重新选择，这种走不通就退回再走的技术称为「回溯法」，而满足回溯条件的某个状态的点称为「回溯点」。</description>
      
    </item>
    
    <item>
      <title>Datawhale数据结构基础课程笔记-(Day3-6)递归</title>
      <link>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E9%80%92%E5%BD%92/</link>
      <pubDate>Thu, 14 Dec 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E9%80%92%E5%BD%92/</guid>
      <description>递归（Recursion）：指的是一种通过重复将原问题分解为同类的子问题而解决的方法。在绝大数编程语言中，可以通过在函数中再次调用函数自身的方式来实现递归。</description>
      
    </item>
    
    <item>
      <title>linux端口通信相关</title>
      <link>https://nonejou072.github.io/posts/linux/linux%E7%AB%AF%E5%8F%A3%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 14 Dec 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/linux/linux%E7%AB%AF%E5%8F%A3%E7%9B%B8%E5%85%B3/</guid>
      <description>端口信息查看 # 查看当前所有tcp端口情况</description>
      
    </item>
    
    <item>
      <title>linux挂载新硬盘</title>
      <link>https://nonejou072.github.io/posts/linux/linux%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/</link>
      <pubDate>Thu, 14 Dec 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/linux/linux%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/</guid>
      <description>挂载硬盘 # 查看磁盘名称等信息</description>
      
    </item>
    
    <item>
      <title>Datawhale数据结构基础课程笔记-(Day1-2)枚举</title>
      <link>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Tue, 12 Dec 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/leetcode/datawhale%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E6%9E%9A%E4%B8%BE/</guid>
      <description>枚举算法（Enumeration Algorithm）：也称为穷举算法，指的是按照问题本身的性质，一一列举出该问题所有可能的解，并在逐一列举的过程中，将它们逐一与目标状态进行比较以得出满足问题要求的解。在列举的过程中，既不能遗漏也不能重复。</description>
      
    </item>
    
    <item>
      <title>关于 Goal-Conditioned RL 中子目标选择的问题</title>
      <link>https://nonejou072.github.io/posts/gcrl%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 21 Nov 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/gcrl%E7%AC%94%E8%AE%B0/</guid>
      <description>GCRL with Sub-goal Selection / Generation # 本文翻译与参考自: Goal-Conditioned Reinforcement Learning: Problems and Solutions</description>
      
    </item>
    
    <item>
      <title>Relayed HER复现结果与分析</title>
      <link>https://nonejou072.github.io/posts/rher%E5%A4%8D%E7%8E%B0/</link>
      <pubDate>Tue, 24 Oct 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/rher%E5%A4%8D%E7%8E%B0/</guid>
      <description>前言 # 最近花了一些阅读和复现 Relay Hindsight Experience Replay（RHER） 算法，这篇文章写的非常扎实，但作者开源的代码是基于 tensorflow 的 baselines 框架编写的。我在使用 pytorch 重写的过程中有了一些心得体会，在这分享出来。</description>
      
    </item>
    
    <item>
      <title>Mistral-7B 部署</title>
      <link>https://nonejou072.github.io/posts/mistral-7b-%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 18 Oct 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/mistral-7b-%E9%83%A8%E7%BD%B2/</guid>
      <description>前言 # 意外发现 Mistral AI 开源的 Mistral 7B，声称在所有基准测试中的表现均优于 Llama2-13B，迫不及待的在公司服务器上进行了部署。测试后，发现效果真的很好：</description>
      
    </item>
    
    <item>
      <title>mujoco-geom组件参数说明</title>
      <link>https://nonejou072.github.io/posts/mujoco%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Sat, 23 Sep 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/mujoco%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E/</guid>
      <description>geom # contype: int, “1” / conaffinity: int, “1” # contype 和 conaffinity 指定用于动态生成接触对的32位整数位掩码（请参见 Computation 章节中的 碰撞检测）。如果一个geom的contype与另一个geom的conaffinity 是 &amp;ldquo;compatible&amp;rdquo; 的，则两个geom可以发生碰撞。</description>
      
    </item>
    
    <item>
      <title>使用Blender将三角形mesh转为四边形</title>
      <link>https://nonejou072.github.io/posts/%E4%BD%BF%E7%94%A8blender%E5%B0%86%E4%B8%89%E8%A7%92%E5%BD%A2mesh%E8%BD%AC%E4%B8%BA%E5%9B%9B%E8%BE%B9%E5%BD%A2/</link>
      <pubDate>Sat, 23 Sep 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/%E4%BD%BF%E7%94%A8blender%E5%B0%86%E4%B8%89%E8%A7%92%E5%BD%A2mesh%E8%BD%AC%E4%B8%BA%E5%9B%9B%E8%BE%B9%E5%BD%A2/</guid>
      <description>介绍 # 使用三维软件建模后，发现导出的mesh文件是由三角形组成的面，那么如何将该 mesh 转成由四边形组成的面呢？可以使用 Blender 来完成这一操作。</description>
      
    </item>
    
    <item>
      <title>打包自己的 Python 包并上传 PyPi</title>
      <link>https://nonejou072.github.io/posts/pypi/</link>
      <pubDate>Thu, 07 Sep 2023 13:11:22 +0800</pubDate>
      
      <guid>https://nonejou072.github.io/posts/pypi/</guid>
      <description>1.</description>
      
    </item>
    
  </channel>
</rss>
